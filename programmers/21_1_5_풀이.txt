21/1/5 프로그래머스 스택/큐 level2 - 프린터
--------------------------------------------------------------
논리:
1. 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.
2. 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.
3. 그렇지 않으면 J를 인쇄합니다.
==>Queue의 형태
location은 list의 인덱스를 의미함.
우선순위와 각 문자에 해당하는 문자를 zip하여 저장함.
while 문 무한 루프로
0번째와 i번째 비교
if i가 len(우선순위)랑 같아지면 어떤 처리
if priorities[0]>priorities[i] and i <temp_length:
        i += 1
    elif priorities[0]>priorities[i] and i == temp_length -1: #끝까지 갔는데 나보다 큰게 없음.(젤큼)


 
두번째 생각: while문과 max함수 사용
이렇게하니까 테스트케이스 2번째처럼 동일한 값이 여러번 나올때 
몇번째로 출력되었는지 알기가 어려웠음.
처음 생각했던 대로  zip함수를 사용하여 같은 숫자라도 식별할 수 있는
문자같은 것을 줘야할듯
해결! ㅎㅎ

+다른사람의 풀이를 보니 if 조건으로 any를 사용하여 for문 돌려버려서
 논리를 만든사람도 있었다.
참조:
def solution(priorities, location):
    queue =  [(i,p) for i,p in enumerate(priorities)]
    answer = 0
    while True:
        cur = queue.pop(0)
        if any(cur[1] < q[1] for q in queue):
            queue.append(cur)
        else:
            answer += 1
            if cur[0] == location:
                return answer
내가 zip을 써서 만든 temp_list를 한면에 queue 안에서 해결했음.