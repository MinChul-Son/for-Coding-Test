#프로그래머스 정렬 level1 - k번째수

논리
commands는 일단 2차원 배열이므로 이중 for문 돌려서 각index값
탐색해야함. ==>어차피 각원소의 길이는 무조건 3이므로 외부 for문은
i in range (0, len(commands))로 돌고
내부 for문은 j in range (0, 3) 까지 돌림
int형 변수 i , j , k선언 후
각각의 commands를 돌면서
i, j , k에 command[i][j]값 넣어줌
그럼 answer도 리스트로 선언하고
배열 슬라이싱+정렬을 통해 결과도출한후
answer.append()하여 붙여넣어준다음 return

#프로그래머스 정렬 level2 - 가장 큰 수

논리:
첫숫자가 큰게 무조건 앞으로 나와야함
==> 30과 9가 있다면 3보다 9가 크니까 9가 앞으로 나와서
      930이 되는 것이 가장 큰수.
즉 맨 앞숫자를 비교하고 만약같다면 그다음 자리를 비교하면 될듯

첫숫자를 어떻게 비교할까? 자릿수가 다른것도 있는데
각 원소를 문자열로 변환하여 len메소드를 사용해 문자열 길이를 알면
그것의 크기를 알 수있을듯.
문자열로 변환하여 길이 판단 -> 문자열 길이 -1 만큼 10을 곱하여 앞글자 판별 변수만듬
if 30이면 두글자 따라서 앞숫자 판별 변수는 10
따라서 30을 앞숫자 편별 변수로 나눈 몫(//)을 도출하면 3
그 후 숫자비교후 리스트 하나 선언에서 append해놓고
출력은 반복문 돌려서 리스트 끝값까지 출력
for i in range(0, len(ex)):
     print(ex[i], end="") 하면 연결하여 출력가능



--------내가 생각한 논리로는 반복문을 너무 많이써야했고
효율성의 문제가 매우 떨어졌다.

따라서 다른 사람의 코드를 참고하여 작성해보았다.
문자열로 바꾼후 각각 *3하여 문자열을 3번씩 반복시켰다.
이를 가지고 정렬을 하여 뒤집으면
순서대로 정렬된다.. 너무 간단하고 좋은 방식이다.
문자열을 반복하여 자릿수로 판단한다는 것이 너무 신박했다.
==> 100프로 나의 힘으로만 문제를 풀지는 못했지만 나만의 논리를
생각해보고 그것을 직접 작성해봤음에 의의를 둔다.
숫자를 꼭 숫자를 통해서만 정렬해야한다는 고정관념 버리기


##프로그래머스 정렬 level2 - H-index

문제 이해하기가 어려웠다 설명이 난해해서.

논리:
반복문 통해서 각 원소값 확인 (cit_num만큼 돔)
max 변수 선언
count 변수 선언
temp 변수 선언 ==> 기준값
citations[0]를 처음 temp로 둠
for문을 돌면서 temp와 citations[i]값을 비교하여 temp와 같거나
큰 값을 발견할 때마다 count ++
for문 마지막에 조건문 ==> max와 비교하여 max보다 count값이 크면
max를 count값으로 바꿔줌
그렇게 for문 다돌고 나오면 max가 최대 값이므로 이것이 H-index?
라고 초기 논리 잡음.

테스트 케이스는 통과함 제출했는데 다 실패..
놓친 특이 케이스가 있는 듯함.

==> 내가 temp 즉 기준값으로 잡은 수를 변경을안해줬음
그래서 무조건 처음이 기준이라 실패했다.
한번돈 값 이값과
다음 기준값을 통해 돈 값을 비교하여 더 큰값을 해줘야함.

==> 또 다른 특이 케이스 발견 0으로 기준이 지정되면 다 선택
       따라서 0은 제외해야함.
지문 해석을 잘못하고있었다.
h번 이상 인용된 논문이 h편 이상이고 즉 기준값을 통하여 검사한
count의 값이 그 그 기준 값보다 커야한다는 뜻.

리스트를 오름차순으로 정렬 한 후 진행하자.

첫번째 인덱스의 값이 논문 수 cit_num보다 크면 모든 인용
횟수가 논문 갯수보다 큰 것 ==> 논문 갯수 리턴

==> 지문을 잘 읽자....















